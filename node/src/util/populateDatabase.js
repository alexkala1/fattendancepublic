const User = require('../models/User')
const AuthService = require('../services/AuthService')
const StudentService = require('../services/StudentService')

module.exports = {
  generateUsers: async () => {
    
    const emailEnding = '@tei.edu'
    const password = '12345678'

    const names = ["Quinn",
    "Wandis",
    "Stephanus",
    "Arleta",
    "Petr",
    "Allyson",
    "Alma",
    "Giavani",
    "Merrick",
    "Silva",
    "Hale",
    "Suki",
    "Link",
    "Davidde",
    "Cass",
    "Jaclin",
    "Mollee",
    "Billye",
    "Maria",
    "Teodorico",
    "Lena",
    "Sibilla",
    "Willabella",
    "Damien",
    "Nikolos",
    "Keeley",
    "Turner",
    "Stepha",
    "Norry",
    "Larine",
    "Vikki",
    "Sybyl",
    "Ophelie",
    "Doro",
    "Sydney",
    "Owen",
    "Bobbie",
    "Feliks",
    "Papagena",
    "Tomasina",
    "Gordy",
    "Garner",
    "Maison",
    "Elvina",
    "Rayshell",
    "Auberta",
    "Eldridge",
    "Dallon",
    "Valencia",
    "Eunice",
    "Ottilie",
    "Fancy",
    "Perry",
    "Sherwin",
    "Camile",
    "Raina",
    "Ardella",
    "Archibald",
    "Grant",
    "Aksel",
    "Morley",
    "Sheila-kathryn",
    "Paddy",
    "Iormina",
    "Denyse",
    "Charleen",
    "Donalt",
    "Isa",
    "Davide",
    "Tiphani",
    "Zorina",
    "Slade",
    "Dulcy",
    "Gizela",
    "Biddie",
    "Liesa",
    "Garfield",
    "Ruttger",
    "Clerissa",
    "Thomasa",
    "Lory",
    "Ario",
    "Willard",
    "Lyndell",
    "Inger",
    "Alfy",
    "Laura",
    "Kate",
    "Ulla",
    "Anabal",
    "Edithe",
    "Deanna",
    "Elijah",
    "Lucian",
    "Janette",
    "Kahaleel",
    "Hadria",
    "Rosina",
    "Gussi",
    "Mair"]
    const surnames = [
      "Flaubert",
      "Dominici",
      "Shipcott",
      "Pilch",
      "Rammell",
      "Nesey",
      "Blowick",
      "Kinnard",
      "Kimbley",
      "Pina",
      "Cordeiro",
      "Taggert",
      "Gwioneth",
      "Cars",
      "Livesey",
      "Cocks",
      "Laingmaid",
      "Antonioni",
      "Gerrad",
      "Lappine",
      "Chatt",
      "Graber",
      "Crannell",
      "Corzon",
      "Lesly",
      "Iles",
      "Worssam",
      "Giller",
      "Sailor",
      "Figgins",
      "Hassett",
      "Leavey",
      "Kenaway",
      "MacAlester",
      "Rushsorth",
      "Brisse",
      "Liccardo",
      "Takkos",
      "Cartwight",
      "Dybell",
      "Arnopp",
      "Delgardo",
      "Sloss",
      "Keppin",
      "Perrett",
      "Stollberg",
      "Cockerham",
      "Nield",
      "Parkhouse",
      "Cufley",
      "Pearle",
      "Gurwood",
      "Trewinnard",
      "Wallenger",
      "Allberry",
      "McConaghy",
      "Skeel",
      "Jimpson",
      "Walshe",
      "Ridout",
      "Tenpenny",
      "Drei",
      "Meeks",
      "Bartolomieu",
      "Brookwood",
      "Pattie",
      "Northam",
      "Freen",
      "Fricke",
      "Puckey",
      "Kneebone",
      "Skelbeck",
      "Bolgar",
      "Burnsell",
      "Battye",
      "Izsak",
      "Demougeot",
      "Sambedge",
      "Diperaus",
      "Pennazzi",
      "Brinicombe",
      "Bedle",
      "Dooly",
      "Penny",
      "Kitchinham",
      "Pinhorn",
      "Gofton",
      "De", "Witt",
      "Ginsie",
      "Dumblton",
      "Morling",
      "Lorans",
      "Curme",
      "Spedding",
      "Alasdair",
      "Parcall",
      "Hugh",
      "Ledingham",
      "Ladd",
      "Edleston"
      ]
    
    const users = []

    for (let i = 0; i < 100; i++) {
      await AuthService.register({
        email: `${names[i]}.${surnames[i]}${emailEnding}`,
        name: names[i],
        surname: surnames[i],
        password: password,
        userType: ['σπουδαστής','γραμματέας','καθηγητής'][parseInt(Math.random() * 3)]
      })
    }
  },

  generateStudents: async () => {
    let studentUsers = await AuthService.getAllStudentUsers()
    let fingerprintIds = [
      "85a5dd5bc3699787b729790641f0ecb7",
"b32efd7848ca814004e536f8e48b2f52",
"051fcb6f8dfadaff4c7b3550770dd306",
"8116eda60644e51e6ec7bb0a4e86bf0f",
"89b98f2064ce152f6f1a2c1d6167472b",
"b3b5e89f388edb626d01b9aaa3d224d4",
"7acdf93e15b308ea22b1af2fdbff8194",
"c91075ec1d3b946cf600666f9f3f0d13",
"f57a81388a87e214396adc0771dae186",
"5e10066fc45131caad5afb44491e5240",
"978f0b95472f35f7882212521b85cef1",
"6588ba7bd89d0db4308eaed94c549ebf",
"03a91053a27976b36ab8212071d7a863",
"7a11c45d1c227dc17110a0857b300eff",
"5472891bc4824dcec77eb0da3a3c81e3",
"c1d24d2525a145162f7915188df6c2ba",
"8ba217b2ab0934610aaa5cbe776a58bf",
"bfdab649d4d304352886c073b42a8b4b",
"b48712aac6df63caf1d0f11867d703ac",
"bd840d3d173287b385f13c4adf7d243f",
"c2cc847d66c088ec713bae8e7448eaca",
"0d671fde2bd8f67e78928edcf4ec1a9d",
"3a449c020ef3a25f96034940cd48a14e",
"e79d4b6b6d28c2177d0dea3c0e83efbb",
"2e3fdbc5406262210d3b439cf18675a1",
"193eb2d252e0cfaec8e3e6ba3354ff69",
"a1f2d58d4f8d74cc90e2b0a0bc329582",
"493642b7548801b0f88a1a1c394e9ec6",
"c3e82d4effaba94c9e1d90c5e5ec86c5",
"3626a1b7cb410823fd4392312406c507",
"4e2a42aa1b0a5c984609808e9118739d",
"28009bc57d7de2ba34be5edcbee6c79f",
"f3158628756550c78b69cf907b468104",
"062b1e9de435e591278e92d073a7376d",
"79d6fd7dc458c8501d3da84721a190ad",
"d7297cd6e0815c516326382cb3193392",
"147dc1932e7a8e6c8f399e0eb75503e6",
"2bb533c097aaa7ff475c1d0192146f54",
"1a220b0b96b4bba26b6ad227bc3d7405",
"8886fb34e7f8587c896911e4b925875e",
"ad909c617b2e28ce7d10ffa7cefcb82b",
"5ae497870ae3ea5f00223b6fccde3cc4",
"dbd29582d79c396beb642b11b6b262e7",
"9544b060fcff86f6864c30f91ee04a6c",
"9cf9ca49c13f888d348beb749cffba75",
"c18a8f875604b3837e8e0b4f5ceb30b3",
"6ac83089dff4621fe6e428760809c4fe",
"367b6f1a1b07741c6f5c9a420215d30b",
"4efa4c80b8cff3bf580597a9274273fe",
"1cc71ce731c432b3a79d4056e433d262",
"a72d748708bd5c3f6d68b2abb2d1a9b8",
"4d8a6518bfbe3a477ffc2bd62552fdec",
"1dfb94bc39f42e2db8512ae8d061893d",
"08c29b51a7a353d87f3e991b4c1705f6",
"b2133ada39d9e85456bb593fd612a25f",
"30b7ea0bad0d5f043f8f09e331573a60",
"e8af9b6c22dc60fcf7c7bf8a0813bc3e",
"49b85daadab6f0ee5882f2131a09e1ec",
"b6b5399910bcdaef8da76c29a666d1c9",
"fb998d83a3915072cadaf893035a996c",
"7d4b7e3019dc1bce627f1d5503864793",
"6f1c25a7345468b93c8438e369e81594",
"ac0d288b0c029c3770f0fc2aeb0d2584",
"d12490df7696e221498e0bb515b00071",
"21cb7e4347a2642a61b9c7b841679202",
"695c84a2ee13e99ec9efd5569fb7365a",
"b2781856630bc920e97b7aa59baf940a",
"0c2f468e1ae55b3c6a1e01548f64f763",
"8ae7f88f88b6af32e4b4186ec865a480",
"27527e865dc767f7700a3bf942ed53bb",
"f1b3c5dc97a077cf5dedb9fb993068d0",
"a3546be0779be618264cc02703f27859",
"7cd9273b235f46965642807f292539cf",
"ec9efaccebcf64c3fce2e7877ee27bf0",
"858c8282ab41affd1c9eab10550a3188",
"8717b94910a6d1e0b96b0939ac8d869b",
"21bcce1d78c69763b956bab5ec8d2f0b",
"868f3760ec1accb1196994fff6e8bbdf",
"3399ddb965d4b52ded741e34f7ef2a20",
"c2f1a58a93e113c689f988c88c37fa4c",
"af2958d880b4ee6982fb8819b5e0ea17",
"81df7a697923086c53ce1db5c64ee16b",
"8e09d92fef0160b75b1671bfffda040e",
"69b903f1e8b88578e881a735fa2ed7f8",
"8ac90895c067f7d412a3809487ac62f2",
"0d77b57bd8077671e85e2dcf16d9f274",
"2f3fda97ad26524dc3412b71b6c4469a",
"ec62d5f64ce6d280cedca2f30f926702",
"158827bdbc3806019f09a8cd15db9776",
"1c6fa70d9a0a9a0cd5fa0089ea84e6a7",
"e17da4452f901c81d63e9de42e1c03f3",
"cd469a33ce3d1952c94caa6e2188b6d5",
"5ba8cc0c24ecb365675d9a2665c53cc7",
"80ad4fda96bdbc4b9aab1acbbd9e4cff",
"339b5881d56650a17d908fcf0d4ebe54",
"86ee875dee43c09df31783b118dfd252",
"756c8678df4b8889b746c300f46c1561",
"cbf45590001a104e40321298f537f5d2",
"20b74f89a9ae47ff821379a7836d045b",
"79b817974a51d49d5d7e0cc6438655bd"
    ]
    let arithmoiMitroou = [ 1000,
      1001,
      1002,
      1003,
      1004,
      1005,
      1006,
      1007,
      1008,
      1009,
      1010,
      1011,
      1012,
      1013,
      1014,
      1015,
      1016,
      1017,
      1018,
      1019,
      1020,
      1021,
      1022,
      1023,
      1024,
      1025,
      1026,
      1027,
      1028,
      1029,
      1030,
      1031,
      1032,
      1033,
      1034,
      1035,
      1036,
      1037,
      1038,
      1039,
      1040,
      1041,
      1042,
      1043,
      1044,
      1045,
      1046,
      1047,
      1048,
      1049,
      1050,
      1051,
      1052,
      1053,
      1054,
      1055,
      1056,
      1057,
      1058,
      1059,
      1060,
      1061,
      1062,
      1063,
      1064,
      1065,
      1066,
      1067,
      1068,
      1069,
      1070,
      1071,
      1072,
      1073,
      1074,
      1075,
      1076,
      1077,
      1078,
      1079,
      1080,
      1081,
      1082,
      1083,
      1084,
      1085,
      1086,
      1087,
      1088,
      1089,
      1090,
      1091,
      1092,
      1093,
      1094,
      1095,
      1096,
      1097,
      1098,
      1099 ]
    for (i = 0; i < studentUsers.length; i++)
      await StudentService.createStudent({
        name: studentUsers[i].name,
        surname: studentUsers[i].surname,
        email: studentUsers[i].email,
        arithmosMitroou: arithmoiMitroou[i],
        fingerprintID: fingerprintIds[i]
      })
      console.log(studentUsers.length)
  }
}